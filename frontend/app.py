# frontend/app.py

import streamlit as st
import requests

# --- Configura√ß√µes ---
# URL da API do backend
API_URL = "http://localhost:8000/api/v1/chat/query"

# Configura√ß√£o da p√°gina do Streamlit (t√≠tulo, √≠cone, layout)
st.set_page_config(
    page_title="Assistente de Cat√°logo de Dados",
    page_icon="üß†",
    layout="wide"  # Layout "wide" √© melhor para exibir respostas com mais dados
)

# --- T√≠tulo e Descri√ß√£o ---
st.title("üß† Assistente de Cat√°logo de Dados")
st.caption("Pergunte-me sobre esquemas, tabelas e colunas do nosso banco de dados!")

# --- Gerenciamento do Estado da Sess√£o (Session State) ---
# Inicializa o hist√≥rico de mensagens se ele ainda n√£o existir.
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "Ol√°! Sou seu assistente para explorar nosso cat√°logo de dados. O que voc√™ gostaria de saber?"}
    ]
# Inicializa o ID da sess√£o se ele ainda n√£o existir.
if "session_id" not in st.session_state:
    st.session_state.session_id = None

# --- Exibi√ß√£o do Hist√≥rico de Chat ---
# Percorre a lista de mensagens no estado da sess√£o e exibe cada uma na tela.
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# --- Captura e Processamento do Input do Usu√°rio ---
# Cria a caixa de input de chat fixa na parte inferior da p√°gina.
if prompt := st.chat_input("Onde posso encontrar o ID do cliente?"):
    # Adiciona a mensagem do usu√°rio ao hist√≥rico e √† tela imediatamente.
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Prepara para mostrar a resposta do assistente.
    with st.chat_message("assistant"):
        # Mostra um "spinner" de carregamento enquanto aguarda a resposta da API.
        with st.spinner("Analisando metadados..."):
            try:
                # Prepara o corpo (payload) da requisi√ß√£o com a pergunta e o ID da sess√£o atual.
                payload = {
                    "query": prompt,
                    "session_id": st.session_state.session_id
                }

                # Envia a requisi√ß√£o POST para a API do backend.
                response = requests.post(API_URL, json=payload)
                response.raise_for_status()  # Gera um erro se a resposta for um c√≥digo de falha (4xx ou 5xx).

                # Extrai os dados da resposta JSON.
                api_data = response.json()
                api_answer = api_data["answer"]
                
                # ATUALIZA o ID da sess√£o com o valor retornado pela API.
                # Isso √© crucial para manter a continuidade da conversa.
                st.session_state.session_id = api_data["session_id"]
                
                # Exibe a resposta da API diretamente na tela.
                st.markdown(api_answer)

            except requests.exceptions.RequestException as e:
                # Trata erros de conex√£o com a API ou falhas da API.
                api_answer = f"**Erro de comunica√ß√£o com a API.** Verifique se o backend est√° rodando.\n\n*Detalhes: {e}*"
                st.error(api_answer)
            except Exception as e:
                # Trata outros erros inesperados que possam ocorrer.
                api_answer = f"**Ocorreu um erro inesperado.**\n\n*Detalhes: {e}*"
                st.error(api_answer)
        
        # Adiciona a resposta final (seja de sucesso ou de erro) ao hist√≥rico de mensagens.
        st.session_state.messages.append({"role": "assistant", "content": api_answer})